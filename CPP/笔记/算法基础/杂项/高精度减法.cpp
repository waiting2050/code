#include <bits/stdc++.h>
using namespace std;
using ll = long long;

bool cmp(vector<int>& a, vector<int>& b)
{
	if(a.size() != b.size()) return a.size() > b.size();
	for(int i = a.size() - 1; i >= 0; i--)
		if(a[i] != b[i]) return a[i] > b[i];
	
	//如果每一位都相等，那么默认a>b 
	return true;
}

vector<int> sub(vector<int>& a, vector<int>& b)
{
	vector<int> c;
	int temp = 0;
	//从低位到高位去处理 
	for(int i = 0; i < a.size(); i++)
	{
		temp = a[i] - temp;
		if(i < b.size()) temp -= b[i];
		c.push_back((temp + 10) % 10);
		temp = temp < 0 ? 1 : 0;//借位操作 
	}
	//处理前导0 
	while(c.size() > 1 && !c.back())
		c.pop_back();
	
	return c;
}

int main()
{
	ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	
	string ta, tb; cin >> ta >> tb;
	vector<int> a, b;
	//从高位到低位去输入 
	for(int i = ta.size() - 1; i >= 0; i--) a.push_back(ta[i] - '0');
	for(int i = tb.size() - 1; i >= 0; i--) b.push_back(tb[i] - '0');
	
	vector<int> v;
	//处理为 a>b 的状态 
	if(cmp(a, b)) v = sub(a, b);
	else 
	{
		v = sub(b, a);
		cout << '-';
	}
	
	for(int i = v.size() - 1; i >= 0; i--) cout << v[i];
	
	return 0;
}

//2
//1
//
//1
//
//
//44206454136502795674339785522767071049193422541692337206642195979860387029197923101320133261706697208588422732196898479279880353024632432728133462400532943197244141527883168925558113160865467659998015556104464259790226243012604975191575634032999642016739158843453417007391301911329860920466150516536786972681255169834960723920585162514206537853082132508022373896914097055882278769352453349878685848676702106646347346838132908716315914108402631180609527926067922582607076782486148650561466749743611060790783591836078415092261055371516704094278035250666992738282729813403501092332759047134378037994591131894642157766633766144240640306485446008509504158543501451410798665880321307201054385744446703513897319021336973982503629501821609735828907320455681688871203985090844459006987831057464544039649172152901
//71396261724358200067078714136004521113721844502470302419138654827343344195888945312401228893304760308728492712355775368595172183404470054434623274834106493160714343355870232352359310296616639860064999933221139165593119685871252359520302831956508474324773812583101333019747629203648564640784364140165455264211322528864067147556976749598442975816969333383946717392959119722219829409067282990039508321565029524333396796635916678432253436181288123339040945581908891193397369844784889312276038919324685125008924207357964596070357950450435067683322326420422866515130831023124758392953076637997024681952147704927056494363213259296589108200140512826993818679378856204910229455114482380773205040838696062992767045208276330104763021037881768506670901144069254532289208338039707248005498902825063996329660034094
//
//44135057874778437474272706808631066528079700697189866904223057325033043685002034156007732032813392448279694239484542703911285180841227962673698839125698836704083427184527298693205753850568851020137950556171243120624633123326733722832055331201043133542414385030870315674371554282126212355825366152396621517417043847306096656773028185764608094877265163174638427179521137936160058939943386066888646340355137077122013950041496992037883660672221343057270486980486013691413679412641363761249190710824286375665774667628720450496190697421066269026594712924246569871767598982380376333939805970496381013312638984189715101272270552884944051198285305495682510339864122595205888436425206824820281180703608007450904551976128697652398866480783727967322236419311612434338914776752804751758982332154639480043319512118807

