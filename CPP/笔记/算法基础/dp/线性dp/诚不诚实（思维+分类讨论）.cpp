#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const int mod = 998244353;

//注意：不诚实的人也可能说真话，这是多种可能性的重要组成 
void solve()
{
    int n; cin >> n;
    // a 数组用于存储每个学生声称其左侧说谎者的数量
    // f1 数组用于记录第 i 个学生说真话时满足条件的游戏配置数量
    // f2 数组用于记录第 i 个学生说谎话时满足条件的游戏配置数量
    vector<int> a(n + 7), f1(n + 7), f2(n + 7);

    for(int i = 1; i <= n; i++) cin >> a[i];

    // 初始化第一个学生的情况
    if(a[1] == 0) 
        // 若第一个学生声称左侧没有说谎者，他可能说真话也可能说谎话，这两种情况都初始化为 1 种配置
        f1[1] = f2[1] = 1;
    else 
        // 若第一个学生声称左侧有说谎者，那他只能是说谎话，说真话的配置数量为 0，说谎话的配置数量为 1
        f1[1] = 0, f2[1] = 1;
	
	//思路就是分别假设第i个人是诚实的和不诚实两种情况，再对前一个人进行判断 
    for(int i = 2; i <= n; i++)
    {
        // 若第 i 个学生说谎话，那么其配置数量等于第 i - 1 个学生说真话的配置数量
        f2[i] = f1[i - 1];
		
		//假设第i个人是诚实的 
        // 如果第i-1个人说的是真话 （注意：说真话不一定诚实） 
        if(a[i] == a[i - 1]) 
            f1[i] = (f1[i] + f1[i - 1]) % mod;
        // 如果第i-1确定是不诚实的 
        if(a[i] == a[i - 2] + 1) 
            f1[i] = (f1[i] + f2[i - 1]) % mod;//ps：两个if有可能同时成立，在第i-1个人不诚实的说真话的时候 
    }

    // 最终结果为第 n 个学生说真话和说谎话的配置数量之和，并对结果取模
    cout << (f1[n] + f2[n]) % mod << '\n';
}

int main()
{
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    int t; 
    cin >> t;
    while(t--) solve();

    return 0;
}

//8
//3
//0 1 2
//5
//0 0 0 0 0
//5
//0 0 1 1 2
//5
//0 1 2 3 4
//5
//0 0 1 1 1
//5
//5 1 5 2 5
//1
//0
//4
//2 3 1 1
//
//1
//2
//3
//0
//4
//1
//2
//0

